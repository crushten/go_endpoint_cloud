name: Application Test and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Application Lint
    runs-on: ubuntu-20.04
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Setup Go version
        uses: actions/setup-go@v3.3.1
        with:
          go-version-file: 'application/go.mod'
      - run: go version

      - name: Run Go linting
        uses: golangci/golangci-lint-action@v3.3.0
        with:
          version: "v1.50.1"
          working-directory: application/

      - name: Install goreleaser
        uses: goreleaser/goreleaser-action@v3.2.0
        with:
          distribution: goreleaser
          version: v1.12.3
          install-only: true
      
      - name: Run goreleaser check
        run: goreleaser check

  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0
      
      - uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: application/Dockerfile

      - uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: application/goreleaser.Dockerfile

  terraform-lint:
    name: Terraform Lint
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: 1.3.3

      - name: Terraform fmt
        uses: dflook/terraform-fmt-check@v1.29.0
        id: terraform-lint-fmt-check
        with:
          path: terraform/

      - name: Wrong formatting found
        if: ${{ failure() && steps.terraform-lint-fmt-check.outputs.failure-reason == 'check-failed' }}
        run: echo "terraform formatting check failed"

      - name: Terraform init
        id: terraform-lint-init
        run: cd terraform/ && terraform init -input=false

      - name: Terraform validate
        uses: dflook/terraform-validate@v1.29.0
        id: terraform-lint-validate
        with:
          path: terraform/

      - name: Validate failed
        if: ${{ failure() && steps.terraform-lint-validate.outputs.failure-reason == 'validate-failed' }}
        run: echo "terraform validate failed"

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v2.0.1
        with:
          tflint_version: v0.39.3

      - name: Show tflint version
        run: tflint --version

      - name: Init tflint
        run: cd terraform/ && tflint --init

      - name: Run tflint
        run: cd terraform/ && tflint

  test:
    name: Application Test
    needs: lint
    runs-on: ubuntu-20.04
    steps:

       - name: Checkout 
         uses: actions/checkout@v3.1.0

       - name: Setup Go version
         uses: actions/setup-go@v3.3.1
         with:
          go-version-file: 'application/go.mod'
       - run: go version

       - name: Verify dependencies
         run: cd application/ && go mod verify

       - name: Run Go vet
         run: cd application/ && go vet

       - name: Run Go test
         run: cd application/ && go test -v

       - name: Check coverage
         run: cd application/ && go test -cover
         
  terraform-test:
    name: Terraform Test
    needs: terraform-lint
    runs-on: ubuntu-20.04
    steps:

       - name: Checkout 
         uses: actions/checkout@v3.1.0

       - name: Setup Terraform
         uses: hashicorp/setup-terraform@v2.0.2
         with:
           terraform_version: 1.3.3

       - name: Terraform init
         id: terraform-lint-init
         run: cd terraform/ && terraform init -input=false

       #- name: Terraform Plan
         #run: cd terraform/ && terraform plan -no-color

  audit:
    name: Application Scan
    needs: test
    runs-on: ubuntu-20.04
    env:
      GO111MODULE: on
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Setup Go version
        uses: actions/setup-go@v3.3.1
        with:
          go-version-file: 'application/go.mod'
      - run: go version

      - name: Run govulncheck
        uses: Templum/govulncheck-action@v0.0.5
        with:
          go-version: 1.18
          vulncheck-version: latest
          package: application/
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Go dep list
        run: cd application/ && go list -json -m all > go.list

      - name: Scan with specific Nancy version
        uses: sonatype-nexus-community/nancy-github-action@v1.0.2
        with:
          nancyVersion: "v1.0.41"
          goListFile: application/go.list

  terraform-scan:
    name: Terraform Scan
    needs: terraform-test
    runs-on: ubuntu-20.04
    steps:

       - name: Checkout 
         uses: actions/checkout@v3.1.0

       - name: Setup Terraform
         uses: hashicorp/setup-terraform@v2.0.2
         with:
           terraform_version: 1.3.3

       - name: Run tfsec
         uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
         with:
           working_directory: terraform/
           tfsec_version: v1.27.5
           github_token: ${{ secrets.GITHUB_TOKEN }}

       - name: Run Checkov
         uses: bridgecrewio/checkov-action@v12.1817.0
         with:
           directory: terraform/
           download_external_modules: true
           soft_fail: true

       - name: Run Terrascan
         uses: tenable/terrascan-action@v1.4.1
         with:
          iac_type: 'terraform'
          iac_version: 'v14'
          iac_dir: terraform/
          only_warn: true
          config_path: terraform/terrascan.config.toml
          #policy_type: 'aws'
          
  build:
    name: Application Build
    needs: audit
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --force --tags

      - name: Setup Go version
        uses: actions/setup-go@v3.3.1
        with:
          go-version-file: 'application/go.mod'
      - run: go version

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: v1.10.3
          args: build --rm-dist --snapshot
          workdir: application/

  docker-build:
    name: Docker Build
    needs: docker-lint
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.1.0

      - name: Build the Docker image
        uses: docker/build-push-action@v3.2.0
        with:
          context: application/
          tags: go_endpoint_cloud_docker:${{ github.sha }}
          outputs: type=docker,dest=/tmp/go_endpoint_cloud_docker.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: go_endpoint_cloud_docker
          path: /tmp/go_endpoint_cloud_docker.tar
          retention-days: 1

  docker-scan:
    name: Docker Scan
    needs: docker-build
    runs-on: ubuntu-20.04
    steps:

    - name: Download artifact
      uses: actions/download-artifact@v3.0.1
      with:
        name: go_endpoint_cloud_docker
        path: /tmp

    - name: Load image into Docker
      run: |
        docker load --input /tmp/go_endpoint_cloud_docker.tar
        docker image ls -a

    - name: Run Aqua Security Trivy
      uses: aquasecurity/trivy-action@0.7.1
      with:
        image-ref: 'go_endpoint_cloud_docker:${{ github.sha }}'
        format: 'table'
        exit-code: "1"
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'