name: Application Test and Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
    
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go version
        uses: actions/setup-go@v3
        with:
          go-version-file: 'application/go.mod'
      - run: go version

      - name: Run Go linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: "v1.48.0"
          working-directory: application/

      - name: Install goreleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: v1.10.3
          install-only: true
      
      - name: Run goreleaser check
        run: goreleaser check

  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout
        uses: actions/checkout@v3
      
      - uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: application/Dockerfile

      - uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: application/goreleaser.Dockerfile

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-20.04
    steps:

       - name: Checkout 
         uses: actions/checkout@v3

       - name: Setup Go version
         uses: actions/setup-go@v3
         with:
          go-version-file: 'application/go.mod'
       - run: go version

       - name: Verify dependencies
         run: cd application/ && go mod verify

       - name: Run Go vet
         run: cd application/ && go vet

       - name: Run Go test
         run: cd application/ && go test -v

       - name: Check coverage
         run: cd application/ && go test -cover
         
  audit:
    name: Audit
    needs: test
    runs-on: ubuntu-20.04
    env:
      GO111MODULE: on
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go version
        uses: actions/setup-go@v3
        with:
          go-version-file: 'application/go.mod'
      - run: go version

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@v2.12.0

      - name: Run gosec
        run: cd application/ && gosec -tests .

      - name: Create Go dep list
        run: cd application/ && go list -json -m all > go.list

      - name: Scan with specific Nancy version
        uses: sonatype-nexus-community/nancy-github-action@v1.0.2
        with:
          nancyVersion: "v1.0.37"
          goListFile: application/go.list

  build:
    name: Build
    needs: audit
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --force --tags

      - name: Setup Go version
        uses: actions/setup-go@v3
        with:
          go-version-file: 'application/go.mod'
      - run: go version

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: v1.10.3
          args: build --rm-dist --snapshot
          workdir: application/

  docker-build:
    name: Docker Build
    needs: docker-lint
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build the Docker image
        uses: docker/build-push-action@v3.1.1
        with:
          context: application/
          tags: go_endpoint_cloud_docker:${{ github.sha }}
          outputs: type=docker,dest=/tmp/go_endpoint_cloud_docker.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: go_endpoint_cloud_docker
          path: /tmp/go_endpoint_cloud_docker.tar
          retention-days: 1

  docker-scan:
    name: Docker Scan
    needs: docker-build
    runs-on: ubuntu-20.04
    steps:

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: go_endpoint_cloud_docker
        path: /tmp

    - name: Load image into Docker
      run: |
        docker load --input /tmp/go_endpoint_cloud_docker.tar
        docker image ls -a

    - name: Run Aqua Security Trivy
      uses: aquasecurity/trivy-action@0.7.1
      with:
        image-ref: 'go_endpoint_cloud_docker:${{ github.sha }}'
        format: 'table'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'